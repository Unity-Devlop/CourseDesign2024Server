// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: data.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameService_UserInfo_FullMethodName        = "/proto.GameService/UserInfo"
	GameService_UserLogin_FullMethodName       = "/proto.GameService/UserLogin"
	GameService_UserRegister_FullMethodName    = "/proto.GameService/UserRegister"
	GameService_CreateCharacter_FullMethodName = "/proto.GameService/CreateCharacter"
	GameService_PublicChat_FullMethodName      = "/proto.GameService/PublicChat"
	GameService_BubbleChat_FullMethodName      = "/proto.GameService/BubbleChat"
	GameService_StartPublicChat_FullMethodName = "/proto.GameService/StartPublicChat"
	GameService_StartBubbleChat_FullMethodName = "/proto.GameService/StartBubbleChat"
	GameService_StopPublicChat_FullMethodName  = "/proto.GameService/StopPublicChat"
	GameService_StopBubbleChat_FullMethodName  = "/proto.GameService/StopBubbleChat"
	GameService_SearchFriend_FullMethodName    = "/proto.GameService/SearchFriend"
	GameService_AddFriend_FullMethodName       = "/proto.GameService/AddFriend"
	GameService_FriendList_FullMethodName      = "/proto.GameService/FriendList"
	GameService_RemoveFriend_FullMethodName    = "/proto.GameService/RemoveFriend"
)

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	// 用户相关
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CreateCharacterResponse, error)
	// 聊天相关
	PublicChat(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ErrorMessage, error)
	BubbleChat(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ErrorMessage, error)
	StartPublicChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (GameService_StartPublicChatClient, error)
	StartBubbleChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (GameService_StartBubbleChatClient, error)
	StopPublicChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ErrorMessage, error)
	StopBubbleChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ErrorMessage, error)
	// 好友相关
	SearchFriend(ctx context.Context, in *SearchFriendRequest, opts ...grpc.CallOption) (*SearchFriendResponse, error)
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*ErrorMessage, error)
	FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error)
	RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*ErrorMessage, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, GameService_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, GameService_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, GameService_UserRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CreateCharacterResponse, error) {
	out := new(CreateCharacterResponse)
	err := c.cc.Invoke(ctx, GameService_CreateCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) PublicChat(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ErrorMessage, error) {
	out := new(ErrorMessage)
	err := c.cc.Invoke(ctx, GameService_PublicChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) BubbleChat(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ErrorMessage, error) {
	out := new(ErrorMessage)
	err := c.cc.Invoke(ctx, GameService_BubbleChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) StartPublicChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (GameService_StartPublicChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[0], GameService_StartPublicChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceStartPublicChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameService_StartPublicChatClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type gameServiceStartPublicChatClient struct {
	grpc.ClientStream
}

func (x *gameServiceStartPublicChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServiceClient) StartBubbleChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (GameService_StartBubbleChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[1], GameService_StartBubbleChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceStartBubbleChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameService_StartBubbleChatClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type gameServiceStartBubbleChatClient struct {
	grpc.ClientStream
}

func (x *gameServiceStartBubbleChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServiceClient) StopPublicChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ErrorMessage, error) {
	out := new(ErrorMessage)
	err := c.cc.Invoke(ctx, GameService_StopPublicChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) StopBubbleChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ErrorMessage, error) {
	out := new(ErrorMessage)
	err := c.cc.Invoke(ctx, GameService_StopBubbleChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) SearchFriend(ctx context.Context, in *SearchFriendRequest, opts ...grpc.CallOption) (*SearchFriendResponse, error) {
	out := new(SearchFriendResponse)
	err := c.cc.Invoke(ctx, GameService_SearchFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*ErrorMessage, error) {
	out := new(ErrorMessage)
	err := c.cc.Invoke(ctx, GameService_AddFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error) {
	out := new(FriendListResponse)
	err := c.cc.Invoke(ctx, GameService_FriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*ErrorMessage, error) {
	out := new(ErrorMessage)
	err := c.cc.Invoke(ctx, GameService_RemoveFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	// 用户相关
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	CreateCharacter(context.Context, *CreateCharacterRequest) (*CreateCharacterResponse, error)
	// 聊天相关
	PublicChat(context.Context, *ChatMessage) (*ErrorMessage, error)
	BubbleChat(context.Context, *ChatMessage) (*ErrorMessage, error)
	StartPublicChat(*ChatRequest, GameService_StartPublicChatServer) error
	StartBubbleChat(*ChatRequest, GameService_StartBubbleChatServer) error
	StopPublicChat(context.Context, *ChatRequest) (*ErrorMessage, error)
	StopBubbleChat(context.Context, *ChatRequest) (*ErrorMessage, error)
	// 好友相关
	SearchFriend(context.Context, *SearchFriendRequest) (*SearchFriendResponse, error)
	AddFriend(context.Context, *AddFriendRequest) (*ErrorMessage, error)
	FriendList(context.Context, *FriendListRequest) (*FriendListResponse, error)
	RemoveFriend(context.Context, *RemoveFriendRequest) (*ErrorMessage, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedGameServiceServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedGameServiceServer) UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedGameServiceServer) CreateCharacter(context.Context, *CreateCharacterRequest) (*CreateCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacter not implemented")
}
func (UnimplementedGameServiceServer) PublicChat(context.Context, *ChatMessage) (*ErrorMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicChat not implemented")
}
func (UnimplementedGameServiceServer) BubbleChat(context.Context, *ChatMessage) (*ErrorMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BubbleChat not implemented")
}
func (UnimplementedGameServiceServer) StartPublicChat(*ChatRequest, GameService_StartPublicChatServer) error {
	return status.Errorf(codes.Unimplemented, "method StartPublicChat not implemented")
}
func (UnimplementedGameServiceServer) StartBubbleChat(*ChatRequest, GameService_StartBubbleChatServer) error {
	return status.Errorf(codes.Unimplemented, "method StartBubbleChat not implemented")
}
func (UnimplementedGameServiceServer) StopPublicChat(context.Context, *ChatRequest) (*ErrorMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPublicChat not implemented")
}
func (UnimplementedGameServiceServer) StopBubbleChat(context.Context, *ChatRequest) (*ErrorMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBubbleChat not implemented")
}
func (UnimplementedGameServiceServer) SearchFriend(context.Context, *SearchFriendRequest) (*SearchFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFriend not implemented")
}
func (UnimplementedGameServiceServer) AddFriend(context.Context, *AddFriendRequest) (*ErrorMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedGameServiceServer) FriendList(context.Context, *FriendListRequest) (*FriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendList not implemented")
}
func (UnimplementedGameServiceServer) RemoveFriend(context.Context, *RemoveFriendRequest) (*ErrorMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriend not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_UserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).UserRegister(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_CreateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CreateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_CreateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CreateCharacter(ctx, req.(*CreateCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_PublicChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).PublicChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_PublicChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).PublicChat(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_BubbleChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).BubbleChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_BubbleChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).BubbleChat(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_StartPublicChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).StartPublicChat(m, &gameServiceStartPublicChatServer{stream})
}

type GameService_StartPublicChatServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type gameServiceStartPublicChatServer struct {
	grpc.ServerStream
}

func (x *gameServiceStartPublicChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _GameService_StartBubbleChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).StartBubbleChat(m, &gameServiceStartBubbleChatServer{stream})
}

type GameService_StartBubbleChatServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type gameServiceStartBubbleChatServer struct {
	grpc.ServerStream
}

func (x *gameServiceStartBubbleChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _GameService_StopPublicChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).StopPublicChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_StopPublicChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).StopPublicChat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_StopBubbleChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).StopBubbleChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_StopBubbleChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).StopBubbleChat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_SearchFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).SearchFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_SearchFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).SearchFriend(ctx, req.(*SearchFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_AddFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).AddFriend(ctx, req.(*AddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_FriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).FriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_FriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).FriendList(ctx, req.(*FriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).RemoveFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_RemoveFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).RemoveFriend(ctx, req.(*RemoveFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserInfo",
			Handler:    _GameService_UserInfo_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _GameService_UserLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _GameService_UserRegister_Handler,
		},
		{
			MethodName: "CreateCharacter",
			Handler:    _GameService_CreateCharacter_Handler,
		},
		{
			MethodName: "PublicChat",
			Handler:    _GameService_PublicChat_Handler,
		},
		{
			MethodName: "BubbleChat",
			Handler:    _GameService_BubbleChat_Handler,
		},
		{
			MethodName: "StopPublicChat",
			Handler:    _GameService_StopPublicChat_Handler,
		},
		{
			MethodName: "StopBubbleChat",
			Handler:    _GameService_StopBubbleChat_Handler,
		},
		{
			MethodName: "SearchFriend",
			Handler:    _GameService_SearchFriend_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _GameService_AddFriend_Handler,
		},
		{
			MethodName: "FriendList",
			Handler:    _GameService_FriendList_Handler,
		},
		{
			MethodName: "RemoveFriend",
			Handler:    _GameService_RemoveFriend_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartPublicChat",
			Handler:       _GameService_StartPublicChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartBubbleChat",
			Handler:       _GameService_StartBubbleChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data.proto",
}
