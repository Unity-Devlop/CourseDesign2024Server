// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: data.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameService_PlayerInfo_FullMethodName     = "/proto.GameService/PlayerInfo"
	GameService_PlayerLogin_FullMethodName    = "/proto.GameService/PlayerLogin"
	GameService_PlayerRegister_FullMethodName = "/proto.GameService/PlayerRegister"
)

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	PlayerInfo(ctx context.Context, in *PlayerInfoRequest, opts ...grpc.CallOption) (*PlayerInfoResponse, error)
	PlayerLogin(ctx context.Context, in *PlayerLoginRequest, opts ...grpc.CallOption) (*PlayerLoginResponse, error)
	PlayerRegister(ctx context.Context, in *PlayerRegisterRequest, opts ...grpc.CallOption) (*PlayerRegisterResponse, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) PlayerInfo(ctx context.Context, in *PlayerInfoRequest, opts ...grpc.CallOption) (*PlayerInfoResponse, error) {
	out := new(PlayerInfoResponse)
	err := c.cc.Invoke(ctx, GameService_PlayerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) PlayerLogin(ctx context.Context, in *PlayerLoginRequest, opts ...grpc.CallOption) (*PlayerLoginResponse, error) {
	out := new(PlayerLoginResponse)
	err := c.cc.Invoke(ctx, GameService_PlayerLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) PlayerRegister(ctx context.Context, in *PlayerRegisterRequest, opts ...grpc.CallOption) (*PlayerRegisterResponse, error) {
	out := new(PlayerRegisterResponse)
	err := c.cc.Invoke(ctx, GameService_PlayerRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	PlayerInfo(context.Context, *PlayerInfoRequest) (*PlayerInfoResponse, error)
	PlayerLogin(context.Context, *PlayerLoginRequest) (*PlayerLoginResponse, error)
	PlayerRegister(context.Context, *PlayerRegisterRequest) (*PlayerRegisterResponse, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) PlayerInfo(context.Context, *PlayerInfoRequest) (*PlayerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerInfo not implemented")
}
func (UnimplementedGameServiceServer) PlayerLogin(context.Context, *PlayerLoginRequest) (*PlayerLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerLogin not implemented")
}
func (UnimplementedGameServiceServer) PlayerRegister(context.Context, *PlayerRegisterRequest) (*PlayerRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerRegister not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_PlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).PlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_PlayerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).PlayerInfo(ctx, req.(*PlayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_PlayerLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).PlayerLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_PlayerLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).PlayerLogin(ctx, req.(*PlayerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_PlayerRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).PlayerRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_PlayerRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).PlayerRegister(ctx, req.(*PlayerRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayerInfo",
			Handler:    _GameService_PlayerInfo_Handler,
		},
		{
			MethodName: "PlayerLogin",
			Handler:    _GameService_PlayerLogin_Handler,
		},
		{
			MethodName: "PlayerRegister",
			Handler:    _GameService_PlayerRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data.proto",
}
